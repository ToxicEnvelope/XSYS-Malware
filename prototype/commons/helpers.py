#!/usr/bin/env python3
from __future__ import annotations
from abc import ABC, abstractmethod
from typing import List
from os.path import exists, join, abspath, dirname
from prototype.commons.exceptions import ReceiverExecuteException
from os import mkdir
import pickle
import socket
import base64


class Config(object):
    __root__ = join(dirname(dirname(abspath(__file__))), '../..')

    @staticmethod
    def __make_dir__():
        try:
            mkdir(join(Config.__root__, 'dist'))
            return True
        except:
            return False

    @staticmethod
    def dist():
        if not exists(join(Config.__root__, 'dist')):
            Config.__make_dir__()
        return join(Config.__root__, 'dist')


class SocketBuilder(object):
    SERVICE = 1
    INTERFACE = 2
    __sock = None
    __kind = None

    @classmethod
    def of_kind(cls, sock_type: int):
        if sock_type == cls.SERVICE:
            cls.__kind = sock_type
            cls.__create_socket()
        elif sock_type == cls.INTERFACE:
            cls.__kind = sock_type
            cls.__create_socket()
        else:
            raise Exception(f"Socket kind {sock_type} is not supported")
        return cls

    @classmethod
    def point_to(cls, address: tuple):
        if not (cls.__kind == cls.SERVICE or cls.__kind == cls.INTERFACE):
            raise Exception(f"Cannot bind address to unsupported socket kind {cls.__kind}")
        if cls.__kind == cls.SERVICE:
            cls.__sock.bind(address)
        else:
            cls.__sock.connect(address)
        return cls

    @classmethod
    def backlog(cls, max_connections: int):
        if cls.__kind != cls.SERVICE:
            raise Exception(f"Setting backlog to socket kind {cls.__kind} isn't supported")
        else:
            cls.__sock.listen(max_connections)
        return cls

    @classmethod
    def build(cls):
        if not isinstance(cls.__sock, socket.socket):
            raise Exception("Socket wasn't prepared")
        return cls.__sock

    @classmethod
    def __create_socket(cls):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        cls.__sock = sock
        return cls


class Command(ABC):
    """
    The Command interface declares a method for executing a command.
    """

    @abstractmethod
    def execute(self) -> None:
        pass


class SimpleCommand(Command):
    """
    Some commands can implement simple operations on their own.
    """
    def __init__(self, payload: str) -> None:
        self._payload = payload

    def encode(self):
        self._payload = base64.b64encode(self._payload)

    def decode(self):
        self._payload = base64.b64decode(self._payload)

    def execute(self) -> bool:
        try:
            print(f"SimpleCommand: See, I can do simple things like printing"
                  f"({self._payload})")
            return True
        except Exception as e:
            print(e, end="")
            return False


class ComplexCommand(Command):
    """
    However, some commands can delegate more complex operations to other
    objects, called "receivers."
    """
    _stack: List = []

    def __init__(self, receiver: Receiver, *args) -> None:
        """
        Complex commands can accept one or several receiver objects along with
        any context data via the constructor.
        """
        self._receiver = receiver
        self._stack = list(args)

    def execute(self) -> None:
        """
        Commands can delegate to any methods of a receiver.
        """
        for command in self._stack:
            self._receiver.execute(command)


class Receiver:
    """
    The Receiver classes contain some important business logic. They know how to
    perform all kinds of operations, associated with carrying out a request. In
    fact, any class may serve as a Receiver.
    """
    _receiver_socket = None

    def __init__(self, receiver_socket: socket.socket):
        self._receiver_socket = receiver_socket

    def execute(self, command) -> bool:
        try:
            print(f"\nReceiver: Execute Command ({command.encode()})", end="")
            data = pickle.dumps(command.encode())
            print(data)
            self._receiver_socket.sendall(data)
            return True
        except ReceiverExecuteException as e:
            print(e, end="")
            return False


class Invoker:
    """
    The Invoker is associated with one or several commands. It sends a request
    to the command.
    """
    _on_start = None
    _on_finish = None

    """
    Initialize commands.
    """
    def set_on_start(self, command: Command):
        self._on_start = command

    def set_on_finish(self, command: Command):
        self._on_finish = command

    def execute(self) -> None:
        """
        The Invoker does not depend on concrete command or receiver classes. The
        Invoker passes a request to a receiver indirectly, by executing a
        command.
        """
        if isinstance(self._on_start, Command):
            self._on_start.execute()

        if isinstance(self._on_finish, Command):
            self._on_finish.execute()
